Os Development 

BIOS (Basic Input Output Software)
	-routines loaded from chip when computer is switchedon
	-provides auto-detection for devices like screen, keyboard, etc.
	-BIOS reads specific 512b sector of data from physical locations on disk, like 
	Cylinder 2, Head 3, Sector 5
	-The easiest place for BIOS to find sector is Cylinder 0, Head 0, Sector 0
		-known as Boot Sector
	-CPU cannot differeintiate between code and data
	-Magic number (0xaa55)
		-BIOS loos through each storage device and instructs CPU to first boot sector
		with this number
Boot Sector Coding (Actual code in boot_sect.asm)
	-compile in .bin is binary
	-$nasm -f bin *.asm -o *.bin
	-$qemu-system-i386 <bin file>
	-test by witing simple program that loops, fills rest of 512b and then magic number
	-$ int Intel Assembly means program counter, or simply means (right here)
	-last two byte must be magic number, so fill with prgram with 510b
Real Mode
	-for cross compatiblity, CPU designed to emulate 8086
	-8086 had no memory protection (always in real mode)
	-all CPUs initially boot in 16 bit real mode, then switch to 32 or 62 bit protected mode
Hello Bootloader
	-need BIOS to commuicate with screen
Interrupts
	-mechanisms allow CPU to temporaily hault and run some other higher-priority instruction
	-each interrupt is a unique number that is an index to interrupt vector, a table set
	by the BIOS at start of memory(addr 0x0) and contains pointers to ISRs.
	-int 0x10 caused screen ISR to be invoked where as 0x03 is disk-realted I/O ISD
	-BIOS multiplexes the ISRs by a "big switch statement" based on value set on general
	purpose regisers , ax first, prior to interrupt
	-naming convetion: eax=32bot, ax=16bit, ah or al=8bit
	-Scrollig teletye BIOS routine
		-mov ah, 0x0e
		-mov al, <value>
		-int 0x10
Memory, Addresses and labels
	-again, BIOS routines at 0x0
	-BIOS like bootloader to be at 0x7c00
	-memory from 0x0 to 0x100000
		-interrupt vector table(1kb)
		-BIOS data area(256)
		-0x500 to 0x9fc00 is free, and boot loader should be place in this area at 0x7c00
		-Extended BIOS data area 
		-Video Memory
		-BIOS 
		-after 0x100000, free
	-Labels can go anywhere in a program
	-adding a value plus the offset 0x7c00 will result in a correct result, but cumbersome, so
	[org 0x7c00] directive tells assembler where htis code should be added 
	-when setting up stack, set base somewhere "below" 0x9fc00. 
Defining Strings
	-my_string:
		db 'Booting OS'
	-db translates to "declare bytes" which tells assemble to write subsequent bytes to binary
	-anything in '' will be ascii
	-strigs must have length declare
		-one way is to null terminate
		-ex. db 'booting os', 0
Using Stack
	-cannot push and pop single byte (ex. al, ah). Has to be full word
	-bp and sp are esstially top and bottom of stack
	-stack grows downward from base pointer, so push gets stored below
	-when pushing and popping, values less than a word, or 16bits, will be stored in least
	significant register. so if register bx with a char is pushed,it can be retrieved from bl
CPU Flags Registers
	-jumps = je(jmp equal) jne(jump not equal) jle(jump less than equal) etc
Functions
	-on cpu level, functions are just jumps to addresses of a rotuine then a jump back
	-instead off jumping to function and jumping back, use call and ret
	-call pushes return address to stack and return pops the addresss back off
	-use pusha and popa in function to perserve registers
Include File
	-%include "file.path"
	-when assembly multiple files into a binary file, just reference main file
Reading the disk
	-boot sector previously discussed is 512bytes at begining of disk "head 0 cyl 0 sector 0)
	-must bootstrap rest of code from disk into memory
	-CPU runs intital Real Mode, maximum size of registers is 16bit, which means the highest
	addr is 0xffff, which amounts to 64kbs
	-modern operating systems would never fit here, solution is Segmenetation
	-Segment Registers
		-cs, ds, ss, es
		-main memory is divided into segments that are indexed by these registers
		-ds = data segment. Where things like instructions and registes ar estore
		-ss = stack segement. Base pointer stored here
		-adjacent segment registers all overla except for 16 bytes
		-calulate absolute address by multiplying value in segmemt register by 16 and then adds
		offset address.
		-since working in hexidecimal, multiplying by 16 is just leftshifting value
			-ex. 0x42 * 16 == 0x420
			-then add offset address, so
				-mov ax, [0x20]
				-absolute address would by 0x440
		-using [org 0x7c00], assembler will do this automatically
		-segment addressing allow coder to reach further into memory
			-over 1mb (0xffff * 16 + 0xffff)
Using Bios to Read Disks
	-different storage devices require different routines
	-floppy required coder to specifically turn on and off motor that spins disk 
	-Hard disk BIOS routine= after rasing 0x13 interrupt(disk interrupt), set register al
	to 0x02
	-mov dl, 0  ;read drive 0 (first floppy drive)
	-mov ch, 3  ;select cylinder 3
	-mov dh, 1  ;select track on second side of floppy, 0 would be first side
	-mov cl, 4  ;select fourth sector on the track, count base 1
	-mov al, 5  ;read 5 sectors from the start point
	-Then set the address that BIOS neeads to read sectors to, Bios expects to find in ES:BX
	-mov bx, 0xa000
	-mov es, bx
	-mov bx, 0x1234  ;this means data will be read to 0xa000:0x1234
	-int 0x13   ; bios interrupt to actually perfrom these tasks
	-optional, jc disk_error
	
