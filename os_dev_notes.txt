Os Development 

BIOS (Basic Input Output Software)
	-routines loaded from chip when computer is switchedon
	-provides auto-detection for devices like screen, keyboard, etc.
	-BIOS reads specific 512b sector of data from physical locations on disk, like 
	Cylinder 2, Head 3, Sector 5
	-The easiest place for BIOS to find sector is Cylinder 0, Head 0, Sector 0
		-known as Boot Sector
	-CPU cannot differeintiate between code and data
	-Magic number (0xaa55)
		-BIOS loos through each storage device and instructs CPU to first boot sector
		with this number
Boot Sector Coding (Actual code in boot_sect.asm)
	-compile in .bin is binary
	-$nasm -f bin *.asm -o *.bin
	-$qemu-system-i386 <bin file>
	-test by witing simple program that loops, fills rest of 512b and then magic number
	-$ int Intel Assembly means program counter, or simply means (right here)
	-last two byte must be magic number, so fill with prgram with 510b
Real Mode
	-for cross compatiblity, CPU designed to emulate 8086
	-8086 had no memory protection (always in real mode)
	-all CPUs initially boot in 16 bit real mode, then switch to 32 or 62 bit protected mode
Hello Bootloader
	-need BIOS to commuicate with screen
Interrupts
	-mechanisms allow CPU to temporaily hault and run some other higher-priority instruction
	-each interrupt is a unique number that is an index to interrupt vector, a table set
	by the BIOS at start of memory(addr 0x0) and contains pointers to ISRs.
	-int 0x10 caused screen ISR to be invoked where as 0x03 is disk-realted I/O ISD
	-BIOS multiplexes the ISRs by a "big switch statement" based on value set on general
	purpose regisers , ax first, prior to interrupt
	-naming convetion: eax=32bot, ax=16bit, ah or al=8bit
	-Scrollig teletye BIOS routine
		-mov ah, 0x0e
		-mov al, <value>
		-int 0x10
Memory, Addresses and labels
	-again, BIOS routines at 0x0
	-BIOS like bootloader to be at 0x7c00
	-memory from 0x0 to 0x100000
		-interrupt vector table(1kb)
		-BIOS data area(256)
		-0x500 to 0x9fc00 is free, and boot loader should be place in this area at 0x7c00
		-Extended BIOS data area 
		-Video Memory
		-BIOS 
		-after 0x100000, free
	-Labels can go anywhere in a program
	-adding a value plus the offset 0x7c00 will result in a correct result, but cumbersome, so
	[org 0x7c00] directive tells assembler where htis code should be added 
Defining Strings
	-my_string:
		db 'Booting OS'
	-db translates to "declare bytes" which tells assemble to write subsequent bytes to binary
	-anything in '' will be ascii
	-strigs must have length declare
		-one way is to null terminate
		-ex. db 'booting os', 0
